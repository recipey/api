# Use this Dockerfile to setup the development environment for api
FROM golang:1.10.2-alpine3.7 AS dev

# Install bash shell
RUN apk update
RUN apk upgrade
RUN apk add bash
RUN apk add bash-completion

# Install tools required to build project
# We will need to run `docker build --no-cache .` to update those dependencies
RUN apk add --no-cache git
RUN go get github.com/golang/dep/cmd/dep

# Install migrate cli tool to work with postgres
RUN go get -u -d github.com/golang-migrate/migrate/cli github.com/lib/pq
RUN go build -tags 'postgres' -o /usr/local/bin/migrate github.com/golang-migrate/migrate/cli

# Set bash aliases for the container
RUN echo 'alias migrate-create="migrate create -ext sql -dir migrations"' >> ~/.bashrc
RUN echo 'alias migrate-up="migrate -path migrations -database $APP_DB_URL up"' >> ~/.bashrc
RUN echo 'alias migrate-down="migrate -path migrations -database $APP_DB_URL down"' >> ~/.bashrc
RUN echo 'alias migrate-force="migrate -path migrations -database $APP_DB_URL force"' >> ~/.bashrc

# Gopkg.toml and Gopkg.lock lists project dependencies
# These layers will only be re-built when Gopkg files are updated
COPY Gopkg.lock Gopkg.toml /go/src/github.com/recipey/api/
WORKDIR /go/src/github.com/recipey/api/

# Install library dependencies
RUN dep ensure -vendor-only

# Copy all project and build it
# This layer will be rebuilt when ever a file has changed in the project directory
COPY . /go/src/github.com/recipey/api/
RUN go build
